{"version":3,"sources":["components/Message.js","components/MessageList.js","components/NewRoomForm.js","components/RoomList.js","components/SendMessageForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","message","senderId","parts","payload","content","MessageList","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","roomID","messages","map","index","node","ReactDOM","findDOMNode","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","Component","NewRoomForm","_this","call","handleChange","e","setState","roomName","target","handleSubmit","preventDefault","createRoom","state","bind","assertThisInitialized","onSubmit","type","placeholder","onChange","required","id","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","room","active","onClick","subscribeRoom","href","name","SendMessageForm","sendMessage","disabled","App","roomId","joinableRooms","joinedRooms","subscribeToRoom","getRooms","createNewRoom","components_RoomList","concat","components_MessageList","components_SendMessageForm","components_NewRoomForm","_this2","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","text","catch","error","console","log","_this3","subscribeToRoomMultipart","messageLimit","hooks","onMessage","err","_this4","getJoinableRooms","_this5","private","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f03b215.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Message(props) {\r\n  return (\r\n    <div className=\"message\">\r\n      <div className=\"message-username\">{props.message.senderId}</div>\r\n      <div className=\"message-text\">{props.message.parts[0].payload.content}</div>\r\n    </div>\r\n  )\r\n}","import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport Message from './Message'\r\n\r\nexport class MessageList extends Component {\r\n    render() {\r\n        if (!this.props.roomID) {\r\n            return (\r\n                <div className=\"message-list\">\r\n                    <div className=\"join-room\">\r\n                        &larr; Choose a room to chat!\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"message-list\">\r\n                    {this.props.messages.map((message, index) => {\r\n                        return (\r\n                            <Message key={index} message={message} />\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        const node = ReactDOM.findDOMNode(this)\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.shouldScrollToBottom) {\r\n            const node = ReactDOM.findDOMNode(this)\r\n            node.scrollTop = node.scrollHeight\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default MessageList\r\n","import React, { Component } from 'react'\r\n\r\nexport class NewRoomForm extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      roomName: ''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ roomName: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.createRoom(this.state.roomName);\r\n    this.setState({ roomName: '' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"new-room-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type new room name\"\r\n          onChange={this.handleChange}\r\n          value={this.state.roomName}\r\n          required />\r\n          <button \r\n            id=\"create-room-btn\" \r\n            type=\"submit\">\r\n              <h2>+</h2>\r\n          </button>\r\n      </form>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default NewRoomForm\r\n","import React, { Component } from 'react'\r\n\r\nexport class RoomList extends Component {\r\n\r\n  render() {\r\n    const orderedRooms = [...this.props.rooms].sort((a, b) => a.id > b.id)\r\n    return (\r\n      <div className=\"rooms-list\">\r\n        <ul>\r\n          <h3>Your rooms:</h3>\r\n          {orderedRooms.map(room => {\r\n            const active = this.props.roomID === room.id ? \"-active\" : \"\";\r\n            return (\r\n              <li key={room.id} className={\"room\" + active}>\r\n                <a onClick={() => {this.props.subscribeRoom(room.id)} } href=\"#\"># {room.name}</a>\r\n              </li>\r\n            )\r\n          })}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default RoomList\r\n","import React, { Component } from 'react'\r\n\r\nexport class SendMessageForm extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      message: ''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ message: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.sendMessage(this.state.message);\r\n    this.setState({ message: '' });\r\n  }\r\n\r\n  render() {\r\n    //console.log(this.state.message)\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"send-message-form\">\r\n        <input\r\n          disabled={this.props.disabled}\r\n          type=\"text\"\r\n          placeholder=\"Type your message here and hit ENTER\"\r\n          onChange={this.handleChange}\r\n          value={this.state.message}\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SendMessageForm\r\n","import React, { Component } from 'react'\r\nimport MessageList from './components/MessageList'\r\nimport NewRoomForm from './components/NewRoomForm'\r\nimport RoomList from './components/RoomList'\r\nimport SendMessageForm from './components/SendMessageForm'\r\n\r\nimport { tokenUrl, instanceLocator } from './config'\r\n//import Chatkit from '@pusher/chatkit-client'\r\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client'\r\n\r\nexport class App extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      roomId: null,\r\n      messages: [],\r\n      joinableRooms: [],\r\n      joinedRooms: [],\r\n    }\r\n\r\n    this.sendMessage = this.sendMessage.bind(this)\r\n    this.subscribeToRoom = this.subscribeToRoom.bind(this)\r\n    this.getRooms = this.getRooms.bind(this)\r\n    this.createNewRoom = this.createNewRoom.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <RoomList\r\n          roomID={this.state.roomId}\r\n          subscribeRoom={this.subscribeToRoom}\r\n          rooms={[...this.state.joinedRooms, ...this.state.joinableRooms]}\r\n        />\r\n        <MessageList\r\n          roomID={this.state.roomId}\r\n          messages={this.state.messages}\r\n        />\r\n        <SendMessageForm\r\n          disabled={!this.state.roomId}\r\n          sendMessage={this.sendMessage}\r\n        />\r\n        <NewRoomForm\r\n          createRoom={this.createNewRoom}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    const chatManager = new ChatManager({\r\n      instanceLocator: instanceLocator,\r\n      userId: 'chorzkie',\r\n      tokenProvider: new TokenProvider({\r\n        url: tokenUrl\r\n      }),\r\n    })\r\n\r\n    chatManager.connect()\r\n      .then(currentUser => {\r\n        this.currentUser = currentUser\r\n        this.getRooms()\r\n      })\r\n  }\r\n\r\n  sendMessage(text) {\r\n    this.currentUser.sendMessage({\r\n      text: text,\r\n      roomId: this.state.roomId\r\n    })\r\n      .catch(error => console.log('Error on sending message; ', error));\r\n  }\r\n\r\n  subscribeToRoom(roomID) {\r\n    this.setState({ messages: [] })\r\n    this.currentUser.subscribeToRoomMultipart({\r\n      roomId: roomID,\r\n      messageLimit: 50,\r\n      hooks: {\r\n        onMessage: message => {\r\n          //console.log('message.text: ', message.parts[0].payload.content)\r\n          this.setState({\r\n            messages: [...this.state.messages, message]\r\n          })\r\n        }\r\n      }\r\n    })\r\n      .then(room => {\r\n        this.setState({ roomId: room.id })\r\n        this.getRooms()\r\n      })\r\n      .catch(err => console.log('Error on connecting to room; ', err))\r\n  }\r\n\r\n  getRooms() {\r\n    this.currentUser.getJoinableRooms()\r\n      .then(joinableRooms => {\r\n        this.setState({\r\n          joinableRooms: joinableRooms,\r\n          joinedRooms: this.currentUser.rooms\r\n        })\r\n      })\r\n      .catch(err => console.log('Error on getting joinable rooms; ', err))\r\n  }\r\n\r\n  createNewRoom(roomName) {\r\n    this.currentUser.createRoom({\r\n      name: roomName,\r\n      private: false,\r\n    })\r\n      .then( () => {\r\n        this.getRooms()\r\n      })\r\n      .catch(err => console.log('Error on creating room; ', err))\r\n  }\r\n\r\n}\r\n\r\nexport default App","// const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/af799227-05d3-4a5b-ae27-8e378f5683b1/token\";\r\n// const instanceLocator = \"v1:us1:af799227-05d3-4a5b-ae27-8e378f5683b1\";\r\n\r\nconst tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/3276efa7-a45a-4e68-8ce0-548965af2437/token\"\r\nconst instanceLocator = \"v1:us1:3276efa7-a45a-4e68-8ce0-548965af2437\"\r\n\r\nexport { tokenUrl, instanceLocator }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}